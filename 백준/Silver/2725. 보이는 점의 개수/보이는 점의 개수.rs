use std::fmt::Write;
use std::io::{read_to_string, stdin};

fn main() {
    let stdin = read_to_string(stdin()).unwrap();
    let mut token = stdin.split_whitespace();
    let mut next = || token.next().unwrap();

    let t: usize = next().parse().unwrap();
    let mut res = String::with_capacity(t);
    // let dp = solve();

    let dp =
        [0, 2, 4, 8, 12, 20, 24, 36, 44, 56, 64, 84, 92, 116, 128, 144, 160, 192, 204, 240, 256, 280, 300, 344, 360, 400, 424, 460, 484, 540, 556, 616, 648, 688, 720, 768, 792, 864, 900, 948, 980, 1060, 1084, 1168, 1208, 1256, 1300, 1392, 1424, 1508, 1548, 1612, 1660, 1764, 1800, 1880, 1928, 2000, 2056, 2172, 2204, 2324, 2384, 2456, 2520, 2616, 2656, 2788, 2852, 2940, 2988, 3128, 3176, 3320, 3392, 3472, 3544, 3664, 3712, 3868, 3932, 4040, 4120, 4284, 4332, 4460, 4544, 4656, 4736, 4912, 4960, 5104, 5192, 5312, 5404, 5548, 5612, 5804, 5888, 6008, 6088, 6288, 6352, 6556, 6652, 6748, 6852, 7064, 7136, 7352, 7432, 7576, 7672, 7896, 7968, 8144, 8256, 8400, 8516, 8708, 8772, 8992, 9112, 9272, 9392, 9592, 9664, 9916, 10044, 10212, 10308, 10568, 10648, 10864, 10996, 11140, 11268, 11540, 11628, 11904, 12000, 12184, 12324, 12564, 12660, 12884, 13028, 13196, 13340, 13636, 13716, 14016, 14160, 14352, 14472, 14712, 14808, 15120, 15276, 15484, 15612, 15876, 15984, 16308, 16468, 16628, 16792, 17124, 17220, 17532, 17660, 17876, 18044, 18388, 18500, 18740, 18900, 19132, 19308, 19664, 19760, 20120, 20264, 20504, 20680, 20968, 21088, 21408, 21592, 21808, 21952, 22332, 22460, 22844, 23036, 23228, 23396, 23788, 23908, 24304, 24464, 24728, 24928, 25264, 25392, 25712, 25916, 26180, 26372, 26732, 26828, 27248, 27456, 27736, 27948, 28284, 28428, 28788, 29004, 29292, 29452, 29836, 29980, 30424, 30616, 30856, 31080, 31532, 31676, 32132, 32308, 32548, 32772, 33236, 33380, 33748, 33980, 34292, 34484, 34960, 35088, 35568, 35788, 36112, 36352, 36688, 36848, 37280, 37520, 37848, 38048, 38548, 38692, 39132, 39384, 39640, 39896, 40408, 40576, 41008, 41200, 41536, 41796, 42320, 42480, 42896, 43112, 43464, 43728, 44264, 44408, 44948, 45204, 45492, 45764, 46164, 46340, 46892, 47168, 47528, 47720, 48280, 48464, 49028, 49308, 49596, 49836, 50316, 50508, 51052, 51276, 51660, 51948, 52532, 52700, 53164, 53452, 53812, 54108, 54636, 54796, 55300, 55600, 56000, 56288, 56768, 56960, 57572, 57812, 58220, 58460, 59080, 59272, 59896, 60208, 60496, 60808, 61440, 61648, 62208, 62464, 62888, 63152, 63728, 63944, 64424, 64748, 65180, 65500, 66052, 66212, 66872, 67200, 67632, 67964, 68492, 68684, 69356, 69668, 70116, 70372, 70972, 71188, 71776, 72112, 72464, 72808, 73500, 73724, 74420, 74660, 75092, 75412, 76116, 76348, 76908, 77260, 77644, 78000, 78716, 78908, 79592, 79952, 80392, 80680, 81256, 81496, 82228, 82580, 83060, 83348, 83972, 84212, 84956, 85276, 85676, 86044, 86716, 86932, 87688, 87976, 88480, 88860, 89624, 89880, 90360, 90744, 91248, 91632, 92408, 92600, 93304, 93640, 94160, 94552, 95176, 95416, 96208, 96604, 97036, 97356, 98156, 98420, 99140, 99540, 99972, 100308, 101028, 101284, 102100, 102420, 102964, 103372, 104068, 104332, 104988, 105372, 105924, 106284, 107120, 107312, 108152, 108572, 109124, 109540, 110180, 110460, 111180, 111604, 112084, 112420, 113280, 113568, 114432, 114792, 115240, 115672, 116464, 116752, 117628, 117948, 118452, 118836, 119720, 120008, 120712, 121156, 121748, 122132, 123028, 123268, 124068, 124516, 125116, 125568, 126144, 126432, 127344, 127800, 128376, 128728, 129648, 129888, 130812, 131260, 131740, 132204, 133136, 133424, 134216, 134584, 135208, 135672, 136512, 136824, 137544, 137928, 138552, 139028, 139984, 140240, 141104, 141584, 142112, 142552, 143320, 143644, 144616, 145096, 145744, 146080, 147060, 147380, 148276, 148708, 149188, 149668, 150508, 150836, 151832, 152232, 152896, 153396, 154400, 154688, 155488, 155928, 156552, 157056, 158072, 158328, 159192, 159704, 160352, 160864, 161680, 162016, 162936, 163368, 164056, 164440, 165480, 165816, 166860, 167380, 167860, 168384, 169344, 169664, 170676, 171092, 171788, 172220, 173180, 173532, 174380, 174908, 175620, 176156, 176996, 177284, 178364, 178904, 179624, 180136, 181000, 181288, 182380, 182924, 183644, 184044, 185052, 185404, 186340, 186892, 187468, 188020, 189132, 189492, 190500, 190884, 191524, 192084, 193208, 193576, 194472, 195036, 195684, 196244, 197380, 197668, 198808, 199288, 200048, 200528, 201408, 201792, 202944, 203488, 204256, 204704, 205688, 206072, 207112, 207688, 208264, 208848, 210020, 210356, 211436, 211900, 212684, 213260, 214444, 214804, 215572, 216164, 216956, 217484, 218680, 219000, 220200, 220704, 221496, 222096, 222976, 223376, 224588, 225164, 225836, 226316, 227420, 227804, 229028, 229640, 230280, 230760, 231992, 232400, 233636, 234116, 234908, 235528, 236584, 236968, 237968, 238592, 239312, 239936, 241088, 241376, 242636, 243260, 244100, 244732, 245740, 246156, 247164, 247724, 248564, 249076, 250356, 250780, 252064, 252592, 253264, 253840, 255132, 255564, 256724, 257204, 257924, 258572, 259876, 260308, 261348, 261988, 262852, 263404, 264720, 265040, 266360, 267020, 267788, 268444, 269308, 269740, 270972, 271636, 272524, 273052, 274252, 274636, 275980, 276652, 277372, 277996, 279348, 279796, 280948, 281460, 282364, 282964, 284328, 284760, 285848, 286436, 287348, 288020, 289268, 289620, 291000, 291688, 292408, 293100, 294204, 294652, 295932, 296628, 297556, 298036, 299436, 299868, 301164, 301804, 302540, 303244, 304444, 304908, 306324, 306884, 307820, 308524, 309844, 310228, 311188, 311900, 312852, 313568, 315004, 315388, 316612, 317296, 318256, 318976, 320096, 320536, 321988, 322564, 323536, 324112, 325456, 325936, 327400, 328132, 328804, 329508, 330828, 331308, 332784, 333360, 334224, 334848, 336332, 336812, 337996, 338740, 339724, 340364, 341636, 342036, 343536, 344272, 345272, 345944, 347144, 347576, 349088, 349844, 350724, 351300, 352820, 353324, 354620, 355380, 356148, 356912, 358304, 358816, 360352, 360832, 361856, 362624, 364168, 364672, 365872, 366640, 367504, 368280, 369720, 370104, 371504, 372208, 373216, 373888, 375136, 375656, 377228, 378012, 379060, 379684, 381028, 381508, 382948, 383740, 384572, 385364, 386956, 387388, 388860, 389500, 390556, 391356, 392796, 393324, 394380, 395100, 396172, 396972, 398588, 399020, 400640, 401312, 402392, 403112, 404408, 404920, 406432, 407248, 408112, 408752, 410392, 410936, 412580, 413396, 414196, 414892, 416544, 417072, 418728, 419384, 420488, 421256, 422600, 423152, 424480, 425200, 426280, 427116, 428792, 429176, 430800, 431640, 432760, 433600, 434848, 435400, 436720, 437552, 438680, 439320, 440904, 441464, 443168, 443888, 444752, 445600, 447312, 447792, 449508, 450180, 451140, 452000, 453724, 454300, 455676, 456540, 457628, 458348, 459908, 460356, 461940, 462804, 463956, 464748, 465948, 466524, 468276, 469152, 470320, 470960, 472720, 473224, 474988, 475756, 476684, 477568, 479340, 479916, 481428, 482132, 483212, 484100, 485756, 486348, 487772, 488540, 489596, 490492, 492172, 492652, 494316, 495116, 496124, 497020, 498460, 499060, 500872, 501776, 502976, 503552, 505372, 505948, 507588, 508500, 509460, 510372, 511932, 512508, 514344, 515048, 516272, 517192, 518872, 519352, 520792, 521716, 522940, 523836, 525692, 526172, 527684, 528612, 529852, 530784, 532064, 532640, 534512, 535304, 536552, 537288, 539168, 539792, 541552, 542480, 543344, 544184, 546076, 546700, 548428, 549148, 550412, 551180, 553084, 553708, 555228, 556180, 557300, 558256, 559888, 560400, 562260, 563124, 564396, 565356, 566892, 567420, 569352, 570232, 571384, 572152, 574092, 574740, 576396, 577368, 578328, 579288, 581240, 581888, 583648, 584320, 585616, 586596, 588560, 589200, 590768, 591664, 592768, 593632, 595480, 595960, 597940, 598900, 600220, 601060, 602644, 603300, 605292, 606288, 607584, 608384];
    for _ in 0..t {
        let n: usize = next().parse().unwrap();
        writeln!(res, "{}", dp[n] + 1).unwrap();
    }
    print!("{res}");
}

fn gcd(a: i32, b: i32) -> i32 {
    if b == 0 {
        return a;
    }
    gcd(b, a % b)
}

fn solve() -> Vec<i32> {
    let n = 1000;
    let mut dp = vec![0; n + 1];
    for i in 1..=n {
        dp[i] = dp[i - 1];
        for j in 0..i {
            if gcd(i as i32, j as i32) == 1 {
                dp[i] += 2;
            }
        }
    }
    dp
}

#[test]
fn tmp() {
    println!("{:?}", solve());
}
