use std::fmt::Write;
use std::io::{stdin, read_to_string};

fn main() {
    let stdin = read_to_string(stdin()).unwrap();
    let mut token = stdin.split_whitespace();
    let mut next = || token.next().unwrap();

    let mut res = String::new();

    let s: String = next().parse().unwrap();
    let q: usize = next().parse().unwrap();
    
    let ss: Vec<char> = s.chars().collect();

    let n = ss.len();
    let mut pre_happy = vec![0; n + 1];
    let mut pre_sad = vec![0; n + 1];

    let mut poten_one = vec![0; n + 1]; // +^-+, +-^+, +^^+
    let mut poten_two = vec![0; n + 1]; // -^-^-

    if n < 3 {
        print!("{}", "0\n".repeat(q));
        return;
    }

    for i in 0..n {
        if i + 2 < n {
            if ss[i] == '+' && ss[i+1] == '^' && ss[i+2] == '+' {
                pre_happy[i + 1] = 1;
            } else if ss[i] == '-' && ss[i+1] == '^' && ss[i+2] == '-' {
                pre_sad[i + 1] = 1;
            }
        }
        if i + 3 < n {
            if ss[i] == '+' && ss[i+3] == '+' {
                if (ss[i+1] == '^' && ss[i+2] == '-') || (ss[i+1] == '-' && ss[i+2] == '^') || (ss[i+1] == '^' && ss[i+2] == '^') {
                    poten_one[i + 1] = 1;
                }
            }
        }
        if i + 4 < n {
            if ss[i] == '-' && ss[i+1] == '^' && ss[i+2] == '-' && ss[i+3] == '^' && ss[i+4] == '-' {
                poten_two[i + 1] = 1;
            }
        }
    }

    for i in 1..=n {
        pre_happy[i] += pre_happy[i-1];
        pre_sad[i] += pre_sad[i-1];

        poten_one[i] += poten_one[i-1];
        poten_two[i] += poten_two[i-1];
    }

    // println!("pre_happy = {pre_happy:?}");
    // println!("pre sad = {pre_sad:?}");

    // println!("poten one = {poten_one:?}");
    // println!("poten two = {poten_two:?}");

    for _ in 0..q {
        let (l, r): (usize, usize) = (next().parse().unwrap(), next().parse().unwrap());
        let diff = r - l + 1;
        let happy = pre_happy[r - 2] -  pre_happy[l - 1];
        let sad = pre_sad[r - 2] - pre_sad[l - 1];

        let origin = if diff >= 3 { happy - sad } else { 0 };
        let bonus = if diff >= 5 && poten_two[r - 4] - poten_two[l - 1] > 0 {
            2
        } else if diff >= 4 && poten_one[r - 3] - poten_one[l - 1] > 0 {
            1
        } else if diff >= 3 && pre_sad[r - 2] - pre_sad[l - 1] > 0 {
            1
        } else {
            0
        };

        writeln!(res, "{}", origin + bonus).unwrap();
    }
    print!("{res}");
}
