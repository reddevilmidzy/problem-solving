use std::fmt::Write;
use std::io::{read_to_string, stdin};

fn main() {
    let stdin = read_to_string(stdin()).unwrap();
    let mut token = stdin.split_whitespace();
    let mut next = || token.next().unwrap();
    let mut res = String::new();

    let s: Vec<char> = next().parse::<String>().unwrap().chars().collect();
    let q: usize = next().parse().unwrap();

    let n = s.len();
    let mut pre_happy = vec![0; n + 1];
    let mut pre_sad = vec![0; n + 1];

    let mut poten_one_a = vec![0; n + 1]; // +^-+, +^^+
    let mut poten_one_b = vec![0; n + 1]; // +-^+, +^^+
    let mut poten_two = vec![0; n + 1]; // -^-^-

    if n < 3 {
        print!("{}", "0\n".repeat(q));
        return;
    }

    for i in 0..n {
        if i + 2 < n {
            if s[i] == '+' && s[i + 1] == '^' && s[i + 2] == '+' {
                pre_happy[i + 1] = 1;
            } else if s[i] == '-' && s[i + 1] == '^' && s[i + 2] == '-' {
                pre_sad[i + 1] = 1;
            }
        }
        if i + 3 < n {
            if s[i] == '+' && s[i + 3] == '+' {
                if s[i + 1] == '^' && s[i + 2] != '+' {
                    poten_one_a[i + 1] = 1;
                } else if s[i + 1] != '+' && s[i + 2] == '^' {
                    poten_one_b[i + 1] = 1;
                }
            }
        }
        if i + 4 < n {
            if s[i] == '-'
                && s[i + 1] == '^'
                && s[i + 2] == '-'
                && s[i + 3] == '^'
                && s[i + 4] == '-'
            {
                poten_two[i + 1] = 1;
            }
        }
    }

    for i in 1..=n {
        pre_happy[i] += pre_happy[i - 1];
        pre_sad[i] += pre_sad[i - 1];

        poten_one_a[i] += poten_one_a[i - 1];
        poten_one_b[i] += poten_one_b[i - 1];
        poten_two[i] += poten_two[i - 1];
    }

    for _ in 0..q {
        let (l, r): (usize, usize) = (next().parse().unwrap(), next().parse().unwrap());
        let diff = r - l + 1;
        let happy = pre_happy[r - 2] - pre_happy[l - 1];
        let sad = pre_sad[r - 2] - pre_sad[l - 1];

        let origin = if diff >= 3 { happy - sad } else { 0 };
        let bonus = if diff >= 5 && poten_two[r - 4] - poten_two[l - 1] > 0 {
            2
        } else if diff >= 4 && (poten_one_a[r - 3] - poten_one_a[l - 1] > 0)
            || (poten_one_b[r - 3] - poten_one_b[l - 1] > 0)
        {
            1
        } else if diff >= 3 && pre_sad[r - 2] - pre_sad[l - 1] > 0 {
            1
        } else {
            0
        };

        writeln!(res, "{}", origin + bonus).unwrap();
    }
    print!("{res}");
}
